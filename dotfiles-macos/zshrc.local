# Subshells inherit already-declared variables so we
# don't want to add to path etc.


COREUTILS=$(brew --prefix coreutils)/libexec/gnubin
SED=$(brew --prefix gnu-sed)/libexec/gnubin
export PATH="$SED:$COREUTILS:$PATH"

## Link Homebrew casks in `/Applications` rather than `~/Applications`
export HOMEBREW_CASK_OPTS="--appdir=/Applications";

export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:/usr/lib/pkgconfig:/opt/X11/lib/pkgconfig";

## GIS
# Right now ECWJP2 is built against old gdal
export GDAL_DRIVER_PATH="$(brew --prefix)/lib/gdal2plugins"

export PYTHONDONTWRITEBYTECODE=True

export OSG_LIBRARY_PATH=/usr/local/lib/osgPlugins-3.7.0
export IDL_PATH=/Applications/exelis/CAT_ENVI

# PostgreSQL
arr=($HOME/Library/Databases/PostgreSQL $HOME/Library/PostgreSQL)
for fn in $arr; do
  if [ -d $fn ]; then
    export PGDATA=$fn
    break
  fi
done

# Python virtualenvs
export WORKON_HOME="$HOME/Environment/Python-virtualenvs"
export PROJECT_HOME="$HOME/Projects"

#export PYENV_ROOT="/usr/local/var/pyenv"

# Setup `z` command line switcher
. $(brew --prefix)/etc/profile.d/z.sh


# Sometimes needed for installing things

alias git='hub'

# Support `fuck` command for correcting screw-ups
#eval $(thefuck --alias)

#alias pad='mvim -c "Pad ls"'

#export CLICOLOR=1
alias ls='ls --color'

# Set up environment for ENVI and modify the IDL path:
export IDL_PATH="<IDL_DEFAULT>:/Applications/exelis/CAT_ENVI/"

### SOMETHING below this line causes subshells to not work ####
# pyenv
# JUST DEFINING `PYENV_ROOT` leads to subshell failure?
#   Doesn't matter if we refrain from running when subshells
#   are opened
export PYTHON_CONFIGURE_OPTS="--enable-framework CC=clang"
#export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
export VIRTUAL_ENV_DISABLE_PROMPT=1

# nodenv... but your days are numbered
export NODENV_ROOT="$(brew --prefix)/var/nodenv"
if [[ -d $NODENV_ROOT ]];then
    if which nodenv > /dev/null; then
      # initialize nodeenv
      eval "$(nodenv init -)"
      export PATH="$NODENV_ROOT/bin:$PATH"
    fi
fi

#export PYENV_ROOT="$(brew --prefix)/var/pyenv"
## Add pyenv root to PATH
## and initialize pyenv
#if [[ -d $PYENV_ROOT ]];then
    ## initialize pyenv
    #if which pyenv > /dev/null; then
      #export PATH="$PYENV_ROOT/bin:$PATH"
      #eval "$(pyenv init -)";
      ## initialize pyenv virtualenv
      #eval "$(pyenv virtualenv-init -)"
    #fi
    ## We're not using virtualenvwrapper
#fi

function install-gdal() {
  # Function to install GDAL from source including build shims
  v=$1
  if [ -z $v ]; then
    v=$(gdal-config --version)
  fi
  c="pip install "
  c+="--global-option build_ext "
  c+="--global-option \"-I$(brew --prefix)/include/gdal\" "\
  c+="gdal==$v"
  echo $c
  eval $c
}

# Alias to get bundle id
function bundle-id() {
  osascript -e "id of app \"${1}\""
}

# AlphaMELTS
alias run-alphamelts='/Applications/alphamelts/run_alphamelts.command'

alias steno-tunnel="ssh -p 22 -L 5439:127.0.0.1:5432 steno"
function steno-tunnel-web() {
  ssh -p 22 -L 5439:127.0.0.1:5432 -L ${1}:localhost:80 steno
}

function docker-killall {
  docker stop $(docker ps -a -q)
}

function sst {
  ssh -t $@ "tmux -CC attach || tmux -CC new";
}
