#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#



# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

  # Initialize local zshrc
_local="${ZDOTDIR:-$HOME}/.zshrc.local"
if [[ -f $_local ]]; then
  source $_local
fi

if type brew &>/dev/null; then
  # ZSH additional completions for tools like git, yarn, etc.
  # FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
  # autoload -Uz compinit
  # compinit

  # ZSH autosuggestions
  # We integrate autosuggestions outside of ZPrezto
  # source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# Mint Swift package manager
mintdir="$HOME/.mint/bin"
export PATH="$mintdir:$PATH"

if type "dircolors" > /dev/null; then
  # GNU dircolors is installed
cfile=$HOME/.dircolors-$(tput colors)
if [[ -f $cfile ]]; then
    eval $(dircolors -b $cfile)
else
    eval $(dircolors)
fi
else
  # No dircolors script is installed
  export LSCOLORS=GxCxhxDxfxhxhxhxhxcxcx
  export LS_COLORS="di=1;36:ln=1;32:so=37:pi=1;33:ex=35:bd=37:cd=37:su=37:sg=37:tw=32:ow=32"
fi

if [[ $SHLVL -eq 1 ]] ; then
  # Show environment
  macchina
fi

autoload -U zmv
# Use vim key bindings
bindkey -v

# Enable back-i-search
# bindkey '^R' history-incremental-search-backward

# Edit command line on ^E^V (normal mode) or ESC v (vim mode)
autoload -U edit-command-line

# export MANPATH="/usr/local/man:$MANPATH"

# Donâ€™t clear the screen after quitting a manual page
export MANPAGER="less -X";

# Always enable colored `grep` output
export GREP_OPTIONS="--color=auto";

function killport () {
  kill -9 `lsof -t -i :$1`
}

function reload() {
  source ~/.zshrc
}

function edit-env() {
  mvim ~/Environment/shell-config
}


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Doesn't seem to work under zsh, maybe should fix...
 #Shims for `fzf` cli tool
#_fzf_shims="${ZDOTDIR:-$HOME}/.contrib/fzf-extras"
#if [ -d $_fzf_shims ]; then
  #. $_fzf_shims/fzf-extras.sh
  #. $_fzf_shims/fzf-extras.zsh
#fi
# Fuzzy directory CD
function fd() {
  dir=$(find ${1:-.} -path '*/\.*' -prune \
     -o -type d -print 2> /dev/null | fzf +m) &&r
  cd "$dir"
}

# Zsh Z

zstyle ':completion:*' menu select

unalias z 2> /dev/null

function z() {
  [ $# -gt 0 ] && zshz "$*" && return
  cd "$(zshz -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf-tmux +s --tac --query "$*")"
}

function get_in_project {
  dir=$(find ${PROJECT_DIR:-.} -path '*/\.*' -prune \
    -o -print 2> /dev/null | sed -e "s|${PROJECT_DIR}/||g" | fzf +m) &&
  echo "$PROJECT_DIR/$dir"
}

function smart_open() {
  if [[ -f $1 ]]; then
    if isutf8 $1 &> /dev/null; then
      mvim $1
    else
      open $1
    fi
  else
    cd "$1"
  fi

}

# Project fuzzy finder
function pf() {
  dn=$(get_in_project) &&
  smart_open $dn
}

# Always open in editor
function pe() {
  dir=$(get_in_project) &&
  mvim $dir
}

function pz() {
  # Fallback to cwd
  dir=${PROJECT_DIR:-$(pwd)}
  [ $# -gt 0 ] && _z "$*" && return
  cd "$dir/$(_z -l 2>&1 | grep "$dir/" | sed "s|${dir}/||g" | fzf-tmux +s --tac --query "$*" | sed 's/^[0-9,.]* *//')"
}

function git-fix() {
  branch=$(git rev-parse --abbrev-ref HEAD)
  commit=$(git log --oneline origin/master.."$branch" | fzf | awk '{print $1}')

  git commit --fixup="$commit"
}

# alias ls='ls --color'

# Enables moving with wildcards *.c.orig orig/*.c
alias mmv='noglob zmv -W'

# Bash/zsh aliases
fn="$HOME/.common-aliases"
if [[ -f "$fn" ]]; then
  source "$fn"
fi

alias cdenv="cd $DOTFILES"

# This creates some confusing problems sometimes
unsetopt auto_cd

# Zsh autocomplete
source "$(brew --prefix)/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh"
# Install the spaceship prompt
# This is roughly equivalent to starship
# but optimized for zsh
source "$(brew --prefix)/opt/spaceship/spaceship.zsh"
# Starship shell prompt
# eval "$(starship init zsh)"
#

# Docker volume backup and restore
function backup-volume() {
  docker run --rm -v $1:/$1 alpine tar -c --to-stdout -C /$1 . | pv > $1.tar
}

function restore-volume() {
  filename=$1
  tar_args=xf
  # Look for bare slug, tar, and tar.gz
  if [[ ! -f $filename ]]; then
    echo "File not found: $filename" >&2
    filename="$filename.tar"
  fi
  if [[ ! -f $filename ]]; then
    echo "File not found: $filename" >&2
    filename="$filename.gz"
    tar_args=xzf
  fi

  if [[ ! -f $filename ]]; then
    echo "File not found: $filename" >&2
    return 1
  fi

  volume_name="${filename:r:r}"

  echo "Restoring $filename to $volume_name" >&2

  root_path="/$volume_name"
  mount_path="$root_path"
  # Check if we've specified a subfolder to extract (for weirdly set up archives)

  if [[ -n $2 ]]; then
    mount_path="$root_path/$2"
    echo "Extracting subfolder $2" >&2
  fi

  cat $filename | pv | docker run --rm -v $volume_name:$mount_path -i alpine tar $tar_args - -C $root_path

  # Run du to get details about files
  docker run --rm -v $volume_name:/$volume_name alpine du -h -d 2 $volume_name
}

# Add directory to fpath to store custom completions
fpath+=~/.zfunc


